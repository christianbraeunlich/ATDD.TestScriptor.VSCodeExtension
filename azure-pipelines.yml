######
# ATDD.TestScriptor Build pipeline - Windows x64
######

name: 'ATDD.TestScriptor Beta 0.9.$(Build.BuildId)'

trigger:
  branches:
    include:
    - master
    - refs/tags/*beta*
  #tags:
  #  include:
  #  - refs/tags/beta*

pool:
  vmImage: 'windows-latest'

variables:
- group: TestScriptor
- name: RunVersion
  value: "0.9.$(Build.BuildId)"

steps:
- checkout: self

# Aurelia App

- script: npm install -g aurelia-cli
  displayName: 'Aurelia-CLI install'
  workingDirectory: 'web-ui'

- script: npm install
  displayName: 'Aurelia App restore'
  workingDirectory: 'web-ui'

- script: npm run build
  displayName: 'Aurelia App build'
  workingDirectory: 'web-ui'

# VSCode extension

- script: npm install -g vsce
  displayName: 'VSCE install'
  workingDirectory: 'vscode-extension'

- script: npm install
  displayName: 'VS Ext. restore'
  workingDirectory: 'vscode-extension'
  
- task: PowerShell@2
  displayName: 'VS Ext. Update package.json'
  inputs:
    targetType: 'inline'
    script: '((Get-Content -path ./package.json -Raw) -replace ''"debugMode": true'',''"debugMode": false'') | Set-Content -Path ./package.json'
    workingDirectory: 'vscode-extension'

- script: yarn version --no-git-tag-version --new-version $(RunVersion)
  displayName: 'VS Ext. set version'
  workingDirectory: 'vscode-extension'

- script: npx vsce package
  displayName: 'VS Ext. package'
  workingDirectory: 'vscode-extension'

# Finalize

- task: CopyFiles@2
  displayName: 'VS Ext. copy'
  inputs:
    SourceFolder: 'vscode-extension'
    Contents: '*.vsix'
    TargetFolder: '$(Build.ArtifactStagingDirectory)'

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact'
  inputs:
    pathtoPublish: '$(Build.ArtifactStagingDirectory)' 
    artifactName: 'ATDD.TestScriptor-$(RunVersion)'

- script: npx vsce publish --pat $(VSCE_PAT_LOCAL)
  displayName: 'Publish to Marketplace'
  workingDirectory: 'vscode-extension'
  condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/'))
  
- task: PowerShell@2
  displayName: 'Upload to blob by version'
  inputs:
    targetType: 'inline'
    script: |
      $clientId = '6e782a19-df37-4484-a559-35efa4b8d230'
      $clientSecretValue = '$(CLIENT_SECRET_VALUE_TO_SUBSCRIPTION)'
      $tenantId = '0440d7fc-a6f1-4954-b4a6-e6a439043bff'
      $storageAccountName = 'luxadofiles'
      $containerName = 'atddtestscriptorinsiderbuild'
      $fileName = 'atdd-testscriptor-$(RunVersion).vsix'
      $filePath = 'vscode-extension/atdd-testscriptor-$(RunVersion).vsix'
      az login --service-principal --username $clientId --password $clientSecretValue --tenant $tenantId
      az storage blob upload --account-name $storageAccountName --container-name $containerName --name $fileName --file $filePath

- task: PowerShell@2
  displayName: 'Prepare latest version'
  inputs:
    targetType: 'inline'
    script: 'Copy-Item "vscode-extension/atdd-testscriptor-$(RunVersion).vsix" -Destination "vscode-extension/latest-develop.vsix"'

- task: AzureFileCopy@4  
  displayName: 'Upload to blob as latest'
  inputs:
    SourcePath: 'vscode-extension/latest-develop.vsix'
    azureSubscription: 'TestScriptorConnection'
    Destination: 'AzureBlob'
    storage: 'luxadofiles'
    ContainerName: 'atddtestscriptorinsiderbuild'    
    TargetPath: 'develop-latest.vsix'